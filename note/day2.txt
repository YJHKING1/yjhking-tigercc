day2
	1.自定义全局统一异常
		1.自定义全局异常拦截类
			1.为什么需要：为了解决我们以前在每个controller方法中的trycatch代码，我们需要自定义一个全局异常拦截器
			2.如何定义：在公共微服务中
				1.导入Spring-web依赖
				2.创建一个自定义全局异常类，在类上加上@RestControllerAdvice
				3.创建你想要拦截的异常类型方法，在方法上加上一个@ExceptionHandler注解，并设置要拦截的异常类型，在方法参数中接收异常，在方法中响应异常提示信息和错误码，最好使用枚举异常返回
			3.给JsonResult加上一个枚举类的有参构造，方便我们直接丢枚举类实例
		2.自定义异常
			1.为什么需要：需要区别业务异常和系统异常，因为我们响应的提示信息和错误码都不一样，不同的业务异常我们需要给到用户不同的提示信息和错误码
			2.如何定义：
				1.创建一个自定义业务异常类，继承RuntimeException
				2.重写有参无参方法
				3.创建两个字段：message/code
				4.提供两个字段的有参构造方法，并提供get/set
				5.提供一个异常枚举类的有参构造方法
		3.枚举异常码类
			1.为什么需要：我们需要给整个项目规范错误信息提示和对应的错误码，所以我们需要创建错误码枚举类
			2.如何定义：
				1.创建一个枚举类
				2.创建两个字段，提供有参构造和get方法
				3.创建错误码对应的构造方法实例，传入message/code，示例：
					SERVICE_OK("成功", "0"),....;必须写在最上面
		4.JSR303使用
			1.为什么需要：避免我们使用IF判断来校验对象中的字段
			2.使用
				1.导入jar包
				2.在需要校验的对象字段上加上注解
				3.在controller需要校验的对象前面加上@Valid开启校验
				4.需要在全局异常捕捉类中进行MethodArgumentNotValidException异常的捕捉，
				返回给用户看的信息需要通过遍历得到
		5.注册登录概述
			注册
				1.员工添加：调用tigercc-system服务进行员工信息的保存，再调用tigercc-uaa服务进行login的保存
				2.用户添加：调用tigercc-user服务进行用户信息的保存，再调用tigercc-uaa服务进行login的保存
			登录：
				1.登录方案
					1.前台：调用tigercc-uaa服务查询login表，进行登录验证，如果还需要用户自己的其它信息再调用tigercc-user进行查询
					2.后台：调用tigercc-uaa服务查询login表，进行登录验证，如果还需要员工自己的其它信息再调用tigercc-system进行查询
		6.垂直分表
			1.就是为了解决某一张表的字段非常多，这时候我们会进行垂直分表，把一张表的字段分为多张表，根据字段的类型
微服务之间的依赖关系
	1.tigercc-pojo-system依赖了yjhking-basic-commom
		1.依赖原因：需要用来commom里面的工具类
	2.tigercc-service-system依赖了tigercc-pojo-system
		1.依赖原因
			1.需要tigercc-pojo-system的domain
			2.需要yjhking-basic-commom工具类